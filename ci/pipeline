#!/usr/bin/env amm

// Get a logging backend into classpath.
import $ivy.`org.slf4j:slf4j-simple:1.7.25`

import ammonite.ops._
import ammonite.ops.ImplicitWd._
import java.util.concurrent.TimeUnit
import scala.concurrent.duration._
import scala.util.control.NonFatal
import scala.util.Try

import $file.awsClient
import $file.fileUtil
import $file.githubClient
import $file.provision
import $file.releases
import $file.upgrade
import $file.utils

import releases.ReleaseTarget
import utils.SemVer


implicit val SemVerRead: scopt.Read[SemVer] =
  scopt.Read.reads(SemVer(_))

val PACKAGE_DIR: Path = pwd / 'target / 'universal
val PACKAGE_DOCS_DIR: Path = pwd / 'target / "universal-docs"

/**
 * Compile Marathon and run unit and integration tests followed by scapegoat.
 *
 * @param logFileName Name of file which collects logs.
 */
@main
def compileAndTest(logFileName: String): Unit = utils.stage("Compile and Test") {

  def run(cmd: String *) = utils.withCleanUp {utils.runWithTimeout(30.minutes, logFileName)(cmd)}

  run("sbt", "clean", "test", "integration:test", "scapegoat")

  // Compile other projects.
  run("sbt", "benchmark/compile")
  run("sbt", "mesos-simulation/compile")
  run("sbt", "plugin-interface/compile")

  // Check system integration tests.
  checkSystemIntegrationTests(logFileName)
}

@main
def checkSystemIntegrationTests(logFileName: String): Unit = {
  def run(cmd: String *) = utils.runWithTimeout(30.minutes, logFileName)(cmd)
  run("flake8", "--count", "--max-line-length=120", "tests/system", "src/test/python")
}

/**
 * Compresses sandboxes and logs.
 *
 * @param logFileName Name of log file.
 */
@main
def zipLogs(logFileName: String = "ci.log"): Unit = {
  Try(%("tar", "-zcf", "sandboxes.tar.gz", "sandboxes"))
  Try(%("tar", "-zcf", s"$logFileName.tar.gz", "--remove-files", logFileName))
}

/**
 * Upload Marathon tgz tarballs, its sha1 checksum and docs to S3.
 *
 * @param version The version to upload.
 * @param buildLocation subfolder location to upload tarball to. Example: "builds"
 * @return Artifact description if it was uploaded.
 */
def uploadTarballPackagesToS3(version: SemVer, buildLocation: String): Option[awsClient.Artifact] = utils.stage("Upload Tarball Packages") {
  import scala.collection.breakOut

  // Upload docs
  PACKAGE_DOCS_DIR.toIO.listFiles.filter(f => f.getName.endsWith(".tgz"))
    .headOption.foreach(file => awsClient.upload(Path(file), awsClient.s3PathFor(buildLocation)))

  // Upload Marathon
  PACKAGE_DIR.toIO.listFiles.filter(f => f.getName.endsWith(".tgz"))
    .headOption.flatMap(file => awsClient.archiveArtifact(Path(file), awsClient.s3PathFor(buildLocation)))
}

/**
 * Creates the tarball files of the Marathon runnable package with their
 * associated sha1 and the tarball of the documentation with the RAML definitions.
 *
 * @return version of build.
 */
def createTarballPackages(): SemVer = utils.stage("Package Tarballs") {
  val result = %%('sbt, "universal:packageZipTarball", "universal-docs:packageZipTarball")

  val version = %%("./version").out.string.trim
  val gitSha = %%("./version", "commit").out.string.trim

  println(s"Built tarballs for Marathon $version.")
  SemVer(version, gitSha)
}

/**
 * The pipeline target for GitHub pull request builds. It wraps other targets
 * and does some additional reporting to GitHub.
 */
def asPullRequest(run: => (SemVer, Option[awsClient.Artifact])): Unit = {
  val pullNumber: String = sys.env.getOrElse("CHANGE_ID", throw new IllegalArgumentException("No CHANGE_ID was defined."))
  val buildUrl: String = sys.env.getOrElse("BUILD_URL", throw new IllegalArgumentException("No BUILD_URL was defined."))
  val buildTag: String = sys.env.getOrElse("BUILD_TAG", "here")

  try {
    githubClient.reject(pullNumber, buildUrl, buildTag)
    val (_, maybeArtifact) = run
    githubClient.reportSuccess(pullNumber, buildUrl, buildTag, maybeArtifact)
  } catch {
    case NonFatal(e) =>
      githubClient.reportFailure(pullNumber, buildUrl, buildTag, e.getMessage())
      throw e
  }
}

/**
 * Provision the build host.
 */
def provisionHost(): Unit = utils.stage("Provision") {
  // Set port range for random port 0 allocation.
  %('sudo, "ci/set_port_range.sh")

  provision.killStaleTestProcesses()
  provision.installMesos()
}

//////////////////// MAIN TARGETS ////////////////////

/**
 * Run the main build pipeline.
 *
 * @return Version of Marathon build
 */
@main
def build(runTests: Boolean = true): SemVer = {
  if (runTests) {
    val logFileName = s"ci-${sys.env.getOrElse("BUILD_TAG", "run")}.log"
    try {
      compileAndTest(logFileName)
    } finally {
      zipLogs(logFileName)    // Try to archive ci and sandbox logs in any case
    }
  }

  createTarballPackages()
}

/**
  * Builds docker and linux native packages, then runs the tests in tests/package/test.sc
  */
def buildDockerAndLinuxPackages(): Unit = {
  utils.stage("Package Docker Image, Debian and RedHat Packages") {
    %('sbt, "docker:publishLocal", "packageLinux")
  }
}

def testDockerAndLinuxPackages(): Unit = {
  utils.stage("Testing Docker Image, Debian and RedHat Packages") {
    // create test-bed docker images and run the package tests
    val testPath = pwd/'tests/'package
    %('make, "test")(testPath)
  }
}

/**
 * Update DC/OS repository and triggers build of update DC/OS image.
 *
 * @param version The newly built Marathon version.
 * @param artifactUrl Url for the saved Marathon artifact.
 * @param sha1 The sah1 checksum of the artifact.
 */
@main
def updateDcosImage(version: SemVer, artifactUrl: String, sha1: String): Unit = utils.stage("Patch DC/OS Branch") {
  upgrade.updateMarathon(artifactUrl, sha1, s"Update Marathon to $version")
  upgrade.updateMarathonEE(artifactUrl, sha1, s"Update Marathon to $version")
}

/*******************************************************************************
 *******************************  BUILD TARGETS  *******************************
 ******************************************************************************/

/**
 * Build target for master and potential release branches.
 */
@main
def master(): Unit = {
  provisionHost()

  val version = build()
  buildDockerAndLinuxPackages()
  testDockerAndLinuxPackages()

  // Uploads
  val maybeArtifact = uploadTarballPackagesToS3(version, s"builds/$version")
  maybeArtifact.foreach { artifact =>
    updateDcosImage(version, artifact.downloadUrl, artifact.sha1)
  }
}

/**
 * Build target for pull request builds.
 */
@main
def pr(): Unit = asPullRequest {
  provisionHost()
  val version = build()

  // Uploads
  val artifact = uploadTarballPackagesToS3(version, s"builds/$version")
  (version, artifact)
}

/**
 * Build target for our build loop.
 */
@main
def loop(): Unit = {
  provisionHost()
  build()
}

/**
 * The main pipeline target for builds on Jenkins.
 *
 * @return Version and artifact description of Marathon build.
 */
@main
def jenkins(): Unit = {
  if(utils.isPullRequest) pr()
  else master()
}

/**
 * Executes the Community Release which includes:
 *
 *  1. tarball with version details
 *  2. release of docker with that version
 *  3. git tag of version (pushed to server)
 *
 * @param requestVersion The version attempting to be released v1.4.6
 * @param gitSha The git commit sha.  This can be shorthand (ex. 0e1)
 * @param latest Boolean to indicat if the Docker latest should be updated to this version.
 * @return Version and artifact description of Marathon build.
 */
@main
def release(args: String*): Unit = {

  val config = releases.parser.parse(args, releases.Config()).getOrElse {
    sys.exit(1)
    ???
  }

  println(s"Releasing build ${config.version}...")
  releases.verify(config.version)

  %('git, "checkout", config.version.commit)

  val targets = config.targets.toSet

  build(config.runTests)
  buildDockerAndLinuxPackages()
  if (config.runTests)
    testDockerAndLinuxPackages()

  targets.foreach {
    case ReleaseTarget.S3Package =>
      releases.copyTarballBuildsToReleases(config.version)
    case ReleaseTarget.LinuxPackages =>
      releases.uploadLinuxPackagesToRepos(config.version.toTagString)
    case ReleaseTarget.DockerTag =>
      %('docker, "push", s"mesosphere/marathon:${config.version.toTagString}")
    case ReleaseTarget.DockerLatest =>
      %('docker, "tag", s"mesosphere/marathon:${config.version.toTagString}", "mesosphere/marathon:latest")
      %('docker, "push", "mesosphere/marathon:latest")
    case ReleaseTarget.JARArtifact =>
      // publishing to the nexus repository.  This artifact is used by metronome.
      %('sbt, "publish")
  }

  githubClient.tag(config.version.commit, config.version.toTagString)
}
